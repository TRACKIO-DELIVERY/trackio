volumes:
  order_db_production: {}
  order_db_production_backups: {}
  production_redis_data: {}

  rabbitmq_data: {}

services:

  kong:
    image: armeldemarsac/kong-oidc:4.0.0
    container_name: kong
    env_file:
      - .env
    environment:
      KONG_DATABASE: off
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_DECLARATIVE_CONFIG: /opt/kong/kong.yml
      KONG_PLUGINS: bundled,oidc
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    networks:
      - api_gateway
    volumes:
      - ./kong/kong.yml:/opt/kong/kong.yml

  postgres:
    build:
      context: order-service
      dockerfile: ./compose/production/postgres/Dockerfile
    container_name: order_service_postgres
    image: order_service_production_postgres
    volumes:
      - order_db_production:/var/lib/postgresql/data
      - order_db_production_backups:/backups
    env_file:
      - ./.envs/.production/.postgres

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "15672:15672" # RabbitMQ Management UI
      - "5672:5672" # RabbitMQ AMQP protocol
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./message-broker/rabbitmq:/config
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rabbitmq_net
    environment:
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "-rabbitmq_management load_definitions \"/config/definitions.json\""


  django: &django
    build:
      context: order-service
      dockerfile: ./compose/local/django/Dockerfile
    container_name: order_service_postgres
    image: order_service_production_django
    depends_on:
      - postgres
      - redis
    env_file:
      - ./.envs/.production/.django
      - ./.envs/.production/.postgres
    command: /start

  redis:
    container_name: order_service_redis
    image: docker.io/redis:6
    volumes:
      - production_redis_data:/data

  celeryworker:
    <<: *django

    container_name: order_service_celeryworker
    image: order_service_celeryworker
    command: /start-celeryworker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - order_db_production_backups:/backups
    depends_on:
      - django

  celerybeat:
    <<: *django
    container_name: order_service_celerybeat
    image: order_service_celerybeat
    command: /start-celerybeat
    depends_on:
      - django



networks:
  api_gateway:
    driver: bridge

  rabbitmq_net:
    driver: bridge