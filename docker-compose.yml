volumes:
  order_db_production: {}
  order_db_production_backups: {}
  production_redis_data: {}
  grafana_data: {}
  loki_data: {}
  rabbitmq_data: {}


services:

  kong:
    image: armeldemarsac/kong-oidc:4.0.0
    container_name: kong
    env_file:
      - .env
    environment:
      KONG_DATABASE: "off"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_DECLARATIVE_CONFIG: /opt/kong/kong.yml
    ports:
      - "80:8000"
      - "443:8443"
      - "8001:8001"
      - "8444:8444"
    networks:
      - api_gateway
    volumes:
      - ./infra/kong/kong.yml:/opt/kong/kong.yml

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./infra/logging/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    networks:
      - api_gateway
      - rabbitmq_net
  
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    volumes:
      - ./infra/logging/grafana/grafana.ini:/etc/grafana/grafana.ini # Mount the updated grafana.ini
      - grafana_data:/var/lib/grafana
    networks:
      - api_gateway
    depends_on:
      - loki
  
  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki
      - ./infra/logging/loki-config.yaml:/etc/loki/local-config.yaml
    networks:
      - api_gateway
    user: "10001:10001"

  grafana-agent:
    image: grafana/agent:latest
    container_name: grafana_agent
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./infra/logging/grafana/agent.yaml:/etc/agent/agent.yaml
    command:
      - "--config.file=/etc/agent/agent.yaml"
      - "--enable-features=integrations-next"
    networks:
      - api_gateway
    depends_on:
      - grafana
      - loki

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "15672:15672" # RabbitMQ Management UI
      - "5672:5672" # RabbitMQ AMQP protocol
      - "15692:15692" 
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./message-broker/rabbitmq:/config
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - rabbitmq_net
    environment:
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "-rabbitmq_management load_definitions \"/config/definitions.json\""

  postgres:
    build:
      context: order-service
      dockerfile: ./compose/production/postgres/Dockerfile
    container_name: order_service_postgres
    image: order_service_production_postgres
    restart: always
    volumes:
      - order_db_production:/var/lib/postgresql/data
      - order_db_production_backups:/backups
    env_file:
      - .env
    networks:
      - api_gateway

  mailpit:
    image: docker.io/axllent/mailpit:latest
    container_name: order_service_local_mailpit
    ports:
      - "8025:8025"
    networks:
      - api_gateway

  django: &django
    build:
      context: order-service
      dockerfile: ./compose/production/django/Dockerfile
    container_name: order_service_django
    image: order_service_production_django
    restart: always
    depends_on:
      - postgres
      - redis
    env_file:
      - .env
    networks:
      - api_gateway
      - rabbitmq_net
    command: /start

  redis:
    container_name: order_service_redis
    image: docker.io/redis:6
    restart: always
    volumes:
      - production_redis_data:/data
    networks:
      - api_gateway

  celeryworker:
    <<: *django

    container_name: order_service_celeryworker
    image: order_service_celeryworker
    restart: always
    command: /start-celeryworker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - order_db_production_backups:/backups
    depends_on:
      - django
    networks:
      - api_gateway

  celerybeat:
    <<: *django
    container_name: order_service_celerybeat
    image: order_service_celerybeat
    restart: always
    command: /start-celerybeat
    depends_on:
      - django
    networks:
      - api_gateway

  tracking:
    build:
      context: tracking-service
      dockerfile: Dockerfile
    container_name: tracking_service
    image: tracking_service_production
    restart: always
    env_file:
      - .env
    networks:
      - api_gateway
      - rabbitmq_net
    depends_on:
      - django
      - rabbitmq
    command: node --experimental-strip-types --no-warnings src/http/server.ts

networks:
  api_gateway:
    driver: bridge

  rabbitmq_net:
    driver: bridge